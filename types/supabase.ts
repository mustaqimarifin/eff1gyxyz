/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/userComments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userComments.id"];
          parentId?: parameters["rowFilter.userComments.parentId"];
          slug?: parameters["rowFilter.userComments.slug"];
          name?: parameters["rowFilter.userComments.name"];
          image?: parameters["rowFilter.userComments.image"];
          createdAt?: parameters["rowFilter.userComments.createdAt"];
          updatedAt?: parameters["rowFilter.userComments.updatedAt"];
          text?: parameters["rowFilter.userComments.text"];
          authorId?: parameters["rowFilter.userComments.authorId"];
          author?: parameters["rowFilter.userComments.author"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["userComments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/pages": {
    get: {
      parameters: {
        query: {
          slug?: parameters["rowFilter.pages.slug"];
          view_count?: parameters["rowFilter.pages.view_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["pages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** pages */
          pages?: definitions["pages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          slug?: parameters["rowFilter.pages.slug"];
          view_count?: parameters["rowFilter.pages.view_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          slug?: parameters["rowFilter.pages.slug"];
          view_count?: parameters["rowFilter.pages.view_count"];
        };
        body: {
          /** pages */
          pages?: definitions["pages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/comments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          slug?: parameters["rowFilter.comments.slug"];
          authorId?: parameters["rowFilter.comments.authorId"];
          parentId?: parameters["rowFilter.comments.parentId"];
          createdAt?: parameters["rowFilter.comments.createdAt"];
          updatedAt?: parameters["rowFilter.comments.updatedAt"];
          text?: parameters["rowFilter.comments.text"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["comments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comments */
          comments?: definitions["comments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          slug?: parameters["rowFilter.comments.slug"];
          authorId?: parameters["rowFilter.comments.authorId"];
          parentId?: parameters["rowFilter.comments.parentId"];
          createdAt?: parameters["rowFilter.comments.createdAt"];
          updatedAt?: parameters["rowFilter.comments.updatedAt"];
          text?: parameters["rowFilter.comments.text"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comments.id"];
          slug?: parameters["rowFilter.comments.slug"];
          authorId?: parameters["rowFilter.comments.authorId"];
          parentId?: parameters["rowFilter.comments.parentId"];
          createdAt?: parameters["rowFilter.comments.createdAt"];
          updatedAt?: parameters["rowFilter.comments.updatedAt"];
          text?: parameters["rowFilter.comments.text"];
        };
        body: {
          /** comments */
          comments?: definitions["comments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          email?: parameters["rowFilter.users.email"];
          image?: parameters["rowFilter.users.image"];
          role?: parameters["rowFilter.users.role"];
          isAdmin?: parameters["rowFilter.users.isAdmin"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          email?: parameters["rowFilter.users.email"];
          image?: parameters["rowFilter.users.image"];
          role?: parameters["rowFilter.users.role"];
          isAdmin?: parameters["rowFilter.users.isAdmin"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          name?: parameters["rowFilter.users.name"];
          email?: parameters["rowFilter.users.email"];
          image?: parameters["rowFilter.users.image"];
          role?: parameters["rowFilter.users.role"];
          isAdmin?: parameters["rowFilter.users.isAdmin"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/xid_encode": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer[] */
            _id: number[];
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/increment_page_view": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            page_slug: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/xid_counter": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.xid */
            _xid: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_v8": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/nanoid": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            alphabet?: string;
            /** Format: integer */
            size?: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/_xid_machine_id": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/xid": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: timestamp with time zone */
            _at?: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/xid_time": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.xid */
            _xid: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/uuid_v7": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/xid_pid": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.xid */
            _xid: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/xid_decode": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.xid */
            _xid: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/xid_machine": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.xid */
            _xid: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
};

export type definitions = {
  userComments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
     */
    parentId?: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `pages.slug`.<fk table='pages' column='slug'/>
     */
    slug?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    image?: string;
    /** Format: timestamp with time zone */
    createdAt?: string;
    /** Format: timestamp with time zone */
    updatedAt?: string;
    /** Format: text */
    text?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    authorId?: string;
    /** Format: jsonb */
    author?: unknown;
  };
  pages: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    slug: string;
    /**
     * Format: bigint
     * @default 1
     */
    view_count: number;
  };
  comments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.uuid_v7()
     */
    id: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `pages.slug`.<fk table='pages' column='slug'/>
     */
    slug: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    authorId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `comments.id`.<fk table='comments' column='id'/>
     */
    parentId?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    createdAt: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt?: string;
    /** Format: text */
    text: string;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    image?: string;
    /**
     * Format: public.role
     * @default USER
     * @enum {string}
     */
    role: "BLOCKED" | "USER" | "ADMIN";
    /**
     * Format: boolean
     * @default false
     */
    isAdmin: boolean;
  };
};

export type parameters = {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description userComments */
  "body.userComments": definitions["userComments"];
  /** Format: uuid */
  "rowFilter.userComments.id": string;
  /** Format: uuid */
  "rowFilter.userComments.parentId": string;
  /** Format: text */
  "rowFilter.userComments.slug": string;
  /** Format: text */
  "rowFilter.userComments.name": string;
  /** Format: text */
  "rowFilter.userComments.image": string;
  /** Format: timestamp with time zone */
  "rowFilter.userComments.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.userComments.updatedAt": string;
  /** Format: text */
  "rowFilter.userComments.text": string;
  /** Format: uuid */
  "rowFilter.userComments.authorId": string;
  /** Format: jsonb */
  "rowFilter.userComments.author": string;
  /** @description pages */
  "body.pages": definitions["pages"];
  /** Format: text */
  "rowFilter.pages.slug": string;
  /** Format: bigint */
  "rowFilter.pages.view_count": string;
  /** @description comments */
  "body.comments": definitions["comments"];
  /** Format: uuid */
  "rowFilter.comments.id": string;
  /** Format: text */
  "rowFilter.comments.slug": string;
  /** Format: uuid */
  "rowFilter.comments.authorId": string;
  /** Format: uuid */
  "rowFilter.comments.parentId": string;
  /** Format: timestamp with time zone */
  "rowFilter.comments.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.comments.updatedAt": string;
  /** Format: text */
  "rowFilter.comments.text": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.name": string;
  /** Format: text */
  "rowFilter.users.email": string;
  /** Format: text */
  "rowFilter.users.image": string;
  /** Format: public.role */
  "rowFilter.users.role": string;
  /** Format: boolean */
  "rowFilter.users.isAdmin": string;
};

export type operations = {};

export type external = {};
